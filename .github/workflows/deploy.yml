name: 🚀 Liberation Analytics Deploy

on:
  # Auto deploy main to production
  push:
    branches: [main]
    
  # Manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options: 
          - production
        default: production
      git_ref:
        description: 'Git ref to deploy (branch, tag, or commit SHA)'
        required: true
        default: main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thegreenfieldoverride/liberation-analytics

jobs:
  # Test before deploying
  test:
    name: 🧪 Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: |
          go vet ./...
          go build -o liberation-analytics
          echo "✅ Build successful"

      - name: Test Docker build
        run: |
          docker build -t liberation-analytics:test .
          echo "✅ Docker build successful"

  # Deploy to production
  deploy:
    name: 🚀 Deploy to Production
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://analytics.greenfieldoverride.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Liberation Analytics
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          USER: ${{ secrets.HETZNER_USER }}
          GIT_REF: ${{ github.event.inputs.git_ref || github.sha }}
        run: |
          ssh $USER@$HOST << 'EOF'
            set -e
            
            echo "🚀 Starting Liberation Analytics deployment..."
            echo "📦 Deploying ref: $GIT_REF"
            
            # Navigate to analytics directory
            cd /opt/liberation-analytics
            
            # Update code to specific ref
            echo "📥 Fetching latest code..."
            git fetch origin
            git checkout $GIT_REF
            git pull origin $GIT_REF || true
            
            # Create .env if it doesn't exist (preserve existing)
            if [ ! -f .env ]; then
              echo "📝 Creating .env from template..."
              cp .env.example .env
              echo "⚠️  Please configure .env file with proper credentials"
            fi
            
            # Build and deploy with zero downtime
            echo "🔄 Performing rolling update..."
            
            # Build new image
            echo "🏗️ Building new Docker image..."
            docker compose build liberation-analytics
            
            # Rolling update - start new container, then stop old one
            echo "🟢 Starting new container..."
            docker compose up -d --no-deps liberation-analytics
            
            # Wait for health check
            echo "⏳ Waiting for health check..."
            sleep 15
            
            # Verify deployment
            for i in {1..20}; do
              if curl -f -s http://localhost:8080/api/health > /dev/null; then
                echo "✅ Health check passed!"
                break
              elif [ $i -eq 20 ]; then
                echo "❌ Health check failed after 20 attempts"
                docker compose logs liberation-analytics --tail 50
                exit 1
              else
                echo "⏳ Health check $i/20: waiting..."
                sleep 5
              fi
            done
            
            # Cleanup old images (keep current + 1 previous)
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f || true
            
            # Show final status
            echo "📊 Final status:"
            docker compose ps
            
            echo "✅ Liberation Analytics deployment complete!"
          EOF

      - name: Verify deployment
        run: |
          echo "🔍 Final verification..."
          sleep 10
          
          if curl -f -s http://${{ secrets.HETZNER_HOST }}:8080/api/health; then
            echo "✅ External health check passed!"
            echo "🌍 Analytics available at: https://analytics.greenfieldoverride.com"
          else
            echo "❌ External health check failed"
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 SUCCESS: Liberation Analytics deployed!"
            echo "🌍 URL: https://analytics.greenfieldoverride.com"
            echo "📊 Health: https://analytics.greenfieldoverride.com/api/health"
            echo "📦 Git ref: ${{ github.event.inputs.git_ref || github.sha }}"
            echo "🏃‍♂️ Triggered by: ${{ github.actor }}"
          else
            echo "💥 FAILED: Liberation Analytics deployment failed"
            echo "🔍 Check logs above for details"
            exit 1
          fi